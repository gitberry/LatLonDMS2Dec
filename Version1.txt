using System;
using System.Text.RegularExpressions;

namespace ConsoleApp1
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.Write("Hello World!");
            //Console.WriteLine($"[{LatLonUtils.DMS2Decimal(args[0])}]");
            //Console.WriteLine($"[{LatLonUtils.DMS2DecimalEXIFfromApple(args[0])}]");
            //Console.WriteLine($"[{DMS2DecimalEXIFfromApple(args[0])}]");
            Console.WriteLine($"[{DMS2DecimalEXIFfromApple(args)}]");
        }
        //    }

        //public class LatLonUtils

        //{
        //original from here: https://stackoverflow.com/questions/3249700/convert-degrees-minutes-seconds-to-decimal-coordinates
        //static Regex reg = new Regex(@"^((?<D>\d{1,2}(\.\d+)?)(?<W>[SN])|(?<D>\d{2})(?<M>\d{2}(\.\d+)?)(?<W>[SN])|(?<D>\d{2})(?<M>\d{2})(?<S>\d{2}(\.\d+)?)(?<W>[SN])|(?<D>\d{1,3}(\.\d+)?)(?<W>[WE])|(?<D>\d{3})(?<M>\d{2}(\.\d+)?)(?<W>[WE])|(?<D>\d{3})(?<M>\d{2})(?<S>\d{2}(\.\d+)?)(?<W>[WE]))$");

        //public static double DMS2Decimal(string dms)
        //{
        //    double result = double.NaN;

        //    var match = reg.Match(dms);

        //    if (match.Success)
        //    {
        //        var degrees = double.Parse("0" + match.Groups["D"]);
        //        var minutes = double.Parse("0" + match.Groups["M"]);
        //        var seconds = double.Parse("0" + match.Groups["S"]);
        //        var direction = match.Groups["W"].ToString();
        //        var dec = (Math.Abs(degrees) + minutes / 60d + seconds / 3600d) * (direction == "S" || direction == "W" ? -1 : 1);
        //        var absDec = Math.Abs(dec);

        //        if ((((direction == "W" || direction == "E") && degrees <= 180 & absDec <= 180) || (degrees <= 90 && absDec <= 90)) && minutes < 60 && seconds < 60)
        //        {
        //            result = dec;
        //        }

        //    }

        //    return result;
        //}

        public static string DMS2DecimalEXIFfromApple(string[] DMS)
        {
            // a feature of Apple's format is that it has a double quote - SO... what should be 5 parameters ends up being 4...
            string result = "booya"; // string.Empty;

            //var givenArray = dms.Split(' ');
            result += $"length={DMS.Length}for[{string.Join("|",DMS)}]";
            if (DMS.Length >= 5)
            {
                result = "we have more than 5";
                if (Righty(DMS[2], 1) == "'" && Righty(DMS[3], 1) == "\"" && DMS[1].ToLower() == "deg" && (DMS[4].ToUpper() == "N" || DMS[4].ToUpper() == "W" || DMS[4].ToUpper() == "E"))
                {
                    return $"do something with {DMS}";
                }
            }
            //var match = reg.Match(dms);

            //if (match.Success)
            //{
            //    var degrees = double.Parse("0" + match.Groups["D"]);
            //    var minutes = double.Parse("0" + match.Groups["M"]);
            //    var seconds = double.Parse("0" + match.Groups["S"]);
            //    var direction = match.Groups["W"].ToString();
            //    var dec = (Math.Abs(degrees) + minutes / 60d + seconds / 3600d) * (direction == "S" || direction == "W" ? -1 : 1);
            //    var absDec = Math.Abs(dec);

            //    if ((((direction == "W" || direction == "E") && degrees <= 180 & absDec <= 180) || (degrees <= 90 && absDec <= 90)) && minutes < 60 && seconds < 60)
            //    {
            //        result = dec;
            //    }

            //}

            return result;
        }

        public static string Righty(string value, int length) // WTF MS! - not a standard Right string function in c# after all these years???
        {
            // dutifully stolen from here: https://stackoverflow.com/questions/16782786/right-function-in-c
            if (String.IsNullOrEmpty(value)) return string.Empty;

            return value.Length <= length ? value : value.Substring(value.Length - length);
        }
        //    }

    }
}
